<?php


namespace common\modules\schedule\models;

use common\modules\catalogs\models\NoticeResult;
use common\modules\employee\models\Employee;
use common\modules\patient\models\Patient;
use common\modules\userInterface\models\UserInterface;
use Exception;
use yii\behaviors\TimestampBehavior;
use yii\db\Expression;

/**
 * @property Patient $patient
 * @property  AppointmentsDay $appointments_day
 * @property  AppointmentContent $appointmentContent
 * @property-read Employee $employee
 * @property-read string $employeeName
 * @property-read string $info
 * @property  NoticeResult $noticeResult
 */
class Appointment extends \common\models\Appointment
{
    const SMS_SENT = 7;

    const STATUS_ACTIVE = 'active';
    const STATUS_CANCEL = 'cancel';

    const PRESENCE_STATUS_APPEARED = 1;
    const PRESENCE_STATUS_NOT_APPEARED = 0;


    public static $status_list = [self::SMS_SENT => 'Отправлено смс'];
    /**
     * @var bool|true
     */
    public $initialDateFlag;

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'value' => new Expression('NOW()'),
            ]
        ];
    }

    public function beforeSave($insert)
    {

        parent::beforeSave($insert); // TODO: Change the autogenerated stub


        if ($this->isNewRecord) {
            $this->status = self::STATUS_ACTIVE;
            $this->employee_id = UserInterface::getEmployeeId();
        } else {
            if (!$this->employee_id) $this->employee_id = UserInterface::getEmployeeId();
        }

        if ($this->status == self::STATUS_ACTIVE && $this->hasCrossTime()) {
            // UserInterface::getVar($this->status);
            \Yii::$app->session->setFlash('danger', 'Время занято');
            return false;
        }
        return true;

    }

    public static function getAppointmentsForAppointmentDay(AppointmentsDay $appointment_day)
    {
        return self::find()->where(['dayPR' => $appointment_day->id, 'status' => self::STATUS_ACTIVE])->orderBy('NachNaz')->all();
    }

    public static function GetNoticeList()
    {
        return NoticeResult::getNoticeResultList();
    }

    public static function getAppointmentsForTimeList(AppointmentsDay $appointment_day)
    {

        return self::find()->where(['dayPR' => $appointment_day->id, 'status' => self::STATUS_ACTIVE])->orderBy('NachNaz')->all();

    }

    public static function getSortedByDate($patient_id)
    {
        return self::find()
            ->where(['PatID' => $patient_id])
            ->leftJoin('daypr', 'nazn.dayPR=daypr.id')
            ->orderBy('daypr.date DESC')
            ->all();
    }

    public function getPatient()
    {
        return $this->hasOne(Patient::className(), ['id' => 'PatID']);
    }

    public function getAppointments_day()
    {
        return $this->hasOne(AppointmentsDay::className(), ['id' => 'dayPR']);
    }

    public function getAppointmentContent()
    {
        return $this->hasOne(AppointmentContent::class, ['id' => 'SoderzhNaz']);
    }

    public function attributeLabels()
    {
        return [
            'Id' => 'ID',
            'PatID' => 'Пациент',
            'dayPR' => 'День приёма',
            'NachNaz' => 'Начало приёма',
            'OkonchNaz' => 'Окончание приёма',
            'SoderzhNaz' => 'Содержание приёма',
            'RezObzv' => 'Результат обзвона',
            'Yavka' => 'Явка',
            'NachPr' => 'Фактическое начало приёма',
            'OkonchPr' => 'Фактическое окончание приёма',
            'status' => 'Статус',
            'appointment_content' => 'Содержание приёма',
        ];
    }

    public function AppointmentPresence()
    {
        return ($this->NachPr == "00:00:00" and $this->Yavka == self::PRESENCE_STATUS_APPEARED);
    }

    public function AppointmentStarted()
    {
        return ($this->NachPr <> "00:00:00" and $this->OkonchPr == "00:00:00");
    }

    public function AppointmentStopped()
    {
        return ($this->NachPr <> "00:00:00" and $this->OkonchPr <> "00:00:00");

    }

    public function getNoticeResult()
    {
        return $this->hasOne(NoticeResult::class, ['id' => 'RezObzv']);
    }

    public function getEmployee()
    {
        return $this->hasOne(Employee::class, ['id' => 'employee_id']);
    }

    public function getEmployeeName()
    {
        return $this->employee ? $this->employee->fullName : 'Не указан';
    }

    public function getInfo()
    {
        $string = '';
        $string .= $this->created_at ? 'созд. ' . UserInterface::getFormatedDate($this->created_at) . ' ' : '';
        $string .= $this->updated_at ? 'изм.' . UserInterface::getFormatedDate($this->updated_at) . ' ' : '';
        $string .= $this->employee ? $this->employeeName : '';
        return $string;
    }

    public static function getRowClass($appoitment)
    {
        $class = 'bg-info';
        if ($appoitment->status === Appointment::STATUS_CANCEL) {
            $class = 'bg-danger';
        } elseif ((strtotime(UserInterface::getFormatedDate($appoitment->appointments_day->date))) <= (int)strtotime('now')) {
            $class = 'bg-warning';
        }
        return $class;
    }

    function hasCrossTime()
    {
        $start_time = strtotime($this->appointments_day->date . ' ' . $this->NachNaz);
        $end_time = strtotime($this->appointments_day->date . ' ' . $this->OkonchNaz);

        $duration = 60;


        foreach ($this->appointments_day->appointments as $appointment) {


            $appointment_start_time = strtotime($this->appointments_day->date . ' ' . $appointment->NachNaz);
            $appointment_end_time = strtotime($this->appointments_day->date . ' ' . $appointment->OkonchNaz);

            for ($time = $start_time; $time <= $end_time; $time += $duration) {
                if ($this->Id !== $appointment->Id and $appointment->status == self::STATUS_ACTIVE) {
                    if ($appointment_start_time === $time && $appointment_start_time !== $end_time && $appointment->status == self::STATUS_ACTIVE) {
                        //throw new Exception('Время занято. '.$this->Id.' -'.$appointment->Id.'-' . $time . '-' . strtotime($this->appointments_day->date . ' ' . $appointment->NachNaz) . '-' . strtotime($this->appointments_day->date . ' ' . $appointment->OkonchNaz));
                        return true;
                    }
                    if ($appointment_end_time === $time && $appointment_end_time !== $start_time && $appointment->status == self::STATUS_ACTIVE) {
                        //throw new Exception('Время занято. ' . $time . '-' . strtotime($this->appointments_day->date . ' ' . $appointment->NachNaz) . '-' . strtotime($this->appointments_day->date . ' ' . $appointment->OkonchNaz));
                        return true;
                    }

                    if ($appointment_start_time == $start_time) return true;
                    if ($start_time < $appointment_start_time && $end_time > $appointment_start_time) return true;
                    if ($start_time < $appointment_end_time && $end_time > $appointment_end_time) return true;
                    if ($start_time > $appointment_start_time && $end_time < $appointment_end_time) return true;
                    if ($start_time < $appointment_start_time && $end_time > $appointment_end_time) return true;

                }
            }
        }


        return false;
    }

    /**
     * @return true|false
     */
    public function isInitialOnDate()
    {
        $initial = true;
        $appointment = Appointment::find()
            ->where(['PatID' => $this->PatID])
            ->andWhere(['<>', 'NachPr', '00:00:00'])
            ->andWhere(['<', 'daypr.date', $this->appointments_day->date])
            ->leftJoin('daypr', 'daypr.id=nazn.dayPR')
            ->orderBy('daypr.date DESC')
            ->all();
        if (count($appointment) !== 0) $initial = false;

        return $initial;
    }

    public function setInitialDateFlag()
    {
        $this->initialDateFlag = $this->isInitialOnDate();
    }
}