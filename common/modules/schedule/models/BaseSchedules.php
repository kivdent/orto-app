<?php

namespace common\modules\schedule\models;

use common\modules\clinic\models\Workplaces;
use common\modules\employee\models\Employee;
use common\modules\schedule\models\forms\BaseScheduleDaysForm;
use common\modules\userInterface\models\UserInterface;
use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "raspis_pack".
 *
 * @property int $id
 * @property string $DateD
 * @property int $vrachID
 * @property int $prodpr
 * @property int $doctor_id
 * @property string $created_at
 * @property string $updated_at
 * @property string $start_date
 * @property int $status
 * @property int $appointment_duration
 * @property BaseSchedulesDays[] scheduleDays
 */
class BaseSchedules extends \yii\db\ActiveRecord
{
    const STATUS_ACTIVE = '1';
    const STATUS_INACTIVE = '0';

    const START_TIME = '08:00:00';
    const END_TIME = '20:00:00';

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'raspis_pack';
    }

    public static function DoctorHas($doctor_id,$date)

    {
        return self::find()->where(['doctor_id' => $doctor_id])
            ->andWhere(['status'=>self::STATUS_ACTIVE])
            ->andWhere('start_date<=\''.date('Y-m-d',$date).'\'')
            ->one();
    }

    public static function getActiveDoctorsList()
    {
        return ArrayHelper::map(self::find()
            ->Where(['status'=>self::STATUS_ACTIVE])
            ->asArray()
            ->all(),'doctor_id','doctor_id');
    }

    public static function getActiveDoctorsNameList()
    {


        return ArrayHelper::map(Employee::find()
            ->select(['id','CONCAT(surname," ",name," ",otch) AS full_name'])
            ->where(['id'=>array_keys(self::getActiveDoctorsList())])
            ->asArray()
            ->all(),'id','full_name');
    }


    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['DateD', 'start_date'], 'safe'],
            [['vrachID', 'prodpr', 'doctor_id', 'status', 'appointment_duration'], 'integer'],
            [['doctor_id', 'status', 'appointment_duration'], 'required'],
        ];
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
        $this->start_date = date('d.m.Y', strtotime($this->start_date));
        return true;
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'DateD' => 'Начало',
            'vrachID' => 'Врач',
            'prodpr' => 'Прод. приёма',
            'doctor_id' => 'Врач',
            'created_at' => 'Создано',
            'updated_at' => 'Обновлено',
            'start_date' => 'Начало',
            'status' => 'Статус',
            'appointment_duration' => 'Прод. приёма',
        ];
    }

    public function getScheduleDays()
    {
        return $this->hasMany(BaseSchedulesDays::className(), ['raspis_pack' => 'id']);
    }

    public function getEmployeeList()
    {
        return Employee::getList();
    }

    public static function getDurationIntervals()
    {
        $intervals = [
            '5' => '5 минут',
            '10' => '10 минут',
            '15' => '15 минут',
            '20' => '20 минут',
            '30' => '30  минут',
            '60' => '60  минут',
        ];
        return $intervals;
    }

    public function getStatusList()
    {
        return [
            self::STATUS_ACTIVE => 'Активно',
            self::STATUS_INACTIVE => 'Не активно',
        ];
    }

    public static function getTimeList()
    {
        $list = [];
        $i = 0;
        $time = strtotime('08:00:00');

        while (date('H:i:s', $time) != '20:15:00') {
            $list[date('H:i:s', $time)] = date('H:i:s', $time);
            $time = strtotime(date('Y-m-d H:i:s', $time) . '+15 minutes');
            $i++;
        }

        return $list;
    }

}