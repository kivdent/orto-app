<?php


namespace common\modules\invoice\models;

use common\modules\employee\models\Employee;
use common\modules\invoice\models\Invoice;
use common\modules\userInterface\models\UserInterface;
use phpDocumentor\Reflection\Types\True_;
use yii\helpers\ArrayHelper;


/**
 * @property Invoice $invoice
 * @property-read string $patientFullName
 * @property-read Employee $technic
 * @property-read string $technicFullName
 * @property Invoice $technicalOrderInvoice
 * @property-read string $statusName
 * @property-read bool $isCompleted
 * @property TechnicalOrderLog[] $logs
 *
 */
class TechnicalOrder extends \common\models\TechnicalOrder
{

    const STATUS_CREATED = '0';
    const STATUS_TRANSFERRED_TO_ORTO_LAB = '2';
    const STATUS_ACCEPTED_TO_ORTO_LAB = '4';
    const STATUS_TRANSFERRED_TO_ORTO_CLINIC = '6';
    const STATUS_ACCEPTED_TO_ORTO_CLINIC = '8';
    const STATUS_TRANSFERRED_TO_TP_LAB = '10';
    const STATUS_COMPLETED = '1';

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        $log = new TechnicalOrderLog();
        $log->created_at = date('Y-m-d h:i:s');
        $log->technical_order_id = $this->id;
        $log->employee_id = UserInterface::getEmployeeId();
        $log->status = $this->completed;
        $log->comment = $this->comment;
        $log->items = serialize(ArrayHelper::toArray($this->technicalOrderInvoice->invoiceItems));

        $log->save(false);
        return true;
    }

    public static function getUnclosed($employeeId, $patientId, $startDate, $endDate)
    {

        $technicalOrders = self::find()
            ->leftJoin(Invoice::tableName(), 'technical_order.invoice_id=invoice.id')
            ->where([
                'technical_order.completed' => 0,
                'invoice.doctor_id' => $employeeId,
                'invoice.patient_id' => $patientId,
            ])
            ->andWhere('invoice.created_at>=\'' . $startDate . '\'')
            ->andWhere('invoice.created_at<= \'' . $endDate . '\'')
            ->all();
        return $technicalOrders;
    }

    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'invoice_id' => 'Счёт',
            'employee_id' => 'Зубной техник',
            'delivery_date' => 'Дата сдачи работы',
            'technical_order_invoice_id' => 'Заказ-наряд',
            'completed' => 'Статус',
        ];
    }

    public function getPatientFullName()
    {
        return $this->invoice->patientFullName;
    }

    public function isPaid()
    {
        return $this->invoice->amount_residual == 0;
    }

    public function getTechnic()
    {
        return $this->hasOne(Employee::className(), ['id' => 'employee_id']);
    }

    public function getTechnicFullName()
    {
        return $this->technic->fullName;
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getInvoice()
    {
        return $this->hasOne(Invoice::className(), ['id' => 'invoice_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTechnicalOrderInvoice()
    {
        return $this->hasOne(Invoice::className(), ['id' => 'technical_order_invoice_id']);
    }

    public static function getStatusNameList()
    {
        return [
            self::STATUS_CREATED => 'Создан',
            self::STATUS_TRANSFERRED_TO_ORTO_LAB => 'Передан в лабораторию Орто-Премьер',
            self::STATUS_ACCEPTED_TO_ORTO_LAB => 'Принят в лабораторию Орто-Премьер',
            self::STATUS_TRANSFERRED_TO_ORTO_CLINIC => 'Передан в клинику Орто-Премьер',
            self::STATUS_ACCEPTED_TO_ORTO_CLINIC => 'Принят в клинику Орто-Премьер',
            self::STATUS_TRANSFERRED_TO_TP_LAB => 'Передан в стороннею лабораторию',
            self::STATUS_COMPLETED => 'Выполнен'
        ];
    }

    public function getStatusName()
    {
        return self::getStatusNameList()[$this->completed];
    }

    public function getLogs(): \yii\db\ActiveQuery
    {
        return $this->hasMany(TechnicalOrderLog::class, ['technical_order_id' => 'id']);
    }

    public function changeStatus(string $status)

    {
        if ($this->isCompleted) {
            if (!($status == TechnicalOrder::STATUS_COMPLETED)){
                $this->completed = $status;
                $this->technicalOrderInvoice->paid = 0;
                $this->technicalOrderInvoice->save('false');
                $this->save(false);
            }
        } else {
            $this->completed = $status;
            if ($status == self::STATUS_COMPLETED) {
                $this->completed_date = $this->completed_date ?? date('Y-m-d');
                $this->technicalOrderInvoice->paid = $this->technicalOrderInvoice->amount_payable;
                $this->technicalOrderInvoice->save('false');
            };
            $this->save(false);
        }
        return true;
    }

    public function getIsCompleted(): bool
    {
        if ($this->completed == TechnicalOrder::STATUS_COMPLETED) {
            return true;
        } else {
            return false;
        }
    }
}